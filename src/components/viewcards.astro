---
import { pool } from "../libs/db";
import type { Card, Deck } from "../assets/types";

const deckId = Astro.props.deckId as number;
const userid = await Astro.session?.get("userid");
let cards: Card[] = [];

if (userid) {
  const deck = await pool
    .execute("SELECT * FROM Decks WHERE DeckId = ?", [deckId])
    .then(([rows]) => (rows as Deck[])[0]);

  if (deck && Number(userid) === deck.UserId) {
    const [rows] = await pool.execute(
      "SELECT CardId, Front, Back FROM Cards WHERE DeckId = ?",
      [deck.DeckId]
    );
    cards = rows as Card[];
  }
}
---

<div
  data-cards={JSON.stringify(cards)}
  class="flex flex-col justify-center items-center w-full h-full"
>
  <!-- 1.85:1 -->
  <div
    id="flashcard"
    class="bg-gray-300 w-[37rem] h-[20rem] flex justify-center items-center p-4 cursor-pointer rounded-lg"
    tabindex="0"
  >
    <div class="w-full h-full flex flex-col justify-center items-center">
      <p id="card-content" class="break-words hyphens-auto text-center w-full">
        {cards[0]?.Front}
      </p>
    </div>
  </div>
</div>

<script>
  const cards = JSON.parse(
    (document.querySelector("div[data-cards]") as HTMLElement)?.dataset.cards ||
      "[]"
  );

  let currentCardIndex = 0;
  let showingFront = true;
  let isAnimating = false;

  const flashcard = document.getElementById("flashcard");
  const cardContent = document.getElementById("card-content");

  function flipCard() {
    if (cards.length === 0 || isAnimating) return;

    isAnimating = true;
    flashcard?.classList.add("flip-animation");

    setTimeout(() => {
      showingFront = !showingFront;
      const currentCard = cards[currentCardIndex];

      if (cardContent) {
        cardContent.textContent = showingFront
          ? currentCard.Front
          : currentCard.Back;
      }
    }, 300);

    setTimeout(() => {
      flashcard?.classList.remove("flip-animation");
      isAnimating = false;
    }, 600);
  }

  function slideCard(direction: "left" | "right") {
    if (cards.length === 0 || isAnimating) return;

    isAnimating = true;
    const slideOutClass =
      direction === "right" ? "slide-out-left" : "slide-out-right";
    const slideInClass =
      direction === "right" ? "slide-in-right" : "slide-in-left";

    flashcard?.classList.add(slideOutClass);

    setTimeout(() => {
      showingFront = true;
      const currentCard = cards[currentCardIndex];
      if (cardContent) {
        cardContent.textContent = currentCard.Front;
      }
      flashcard?.classList.remove(slideOutClass);
      flashcard?.classList.add(slideInClass);
    }, 300);

    setTimeout(() => {
      flashcard?.classList.remove(slideInClass);
      isAnimating = false;
    }, 600);
  }

  flashcard?.addEventListener("click", flipCard);

  document.addEventListener("keydown", (event) => {
    if (isAnimating) return;

    if (event.code === "Space") {
      event.preventDefault();
      flipCard();
    } else if (event.code === "ArrowRight") {
      event.preventDefault();
      if (currentCardIndex < cards.length - 1) {
        currentCardIndex++;
        slideCard("right");
      }
    } else if (event.code === "ArrowLeft") {
      event.preventDefault();
      if (currentCardIndex > 0) {
        currentCardIndex--;
        slideCard("left");
      }
    }
  });

  flashcard?.focus();
</script>

<style>
  .flip-animation {
    animation: flip 0.6s ease-in-out;
  }

  .slide-out-left {
    animation: slideOutLeft 0.3s ease-in-out forwards;
  }

  .slide-out-right {
    animation: slideOutRight 0.3s ease-in-out forwards;
  }

  .slide-in-left {
    animation: slideInLeft 0.3s ease-in-out;
  }

  .slide-in-right {
    animation: slideInRight 0.3s ease-in-out;
  }

  body:has(.slide-out-left),
  body:has(.slide-out-right),
  body:has(.slide-in-left),
  body:has(.slide-in-right) {
    overflow-x: hidden;
  }

  @keyframes flip {
    0% {
      transform: rotateX(0deg);
    }
    50% {
      transform: rotateX(90deg);
    }
    100% {
      transform: rotateX(0deg);
    }
  }

  @keyframes slideOutLeft {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-100vw);
    }
  }

  @keyframes slideOutRight {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(100vw);
    }
  }

  @keyframes slideInLeft {
    0% {
      transform: translateX(-100vw);
    }
    100% {
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    0% {
      transform: translateX(100vw);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>
