---
import Navbar from "../layouts/nav.astro";
import { cardClass, cardHTML } from "../assets/createcard";
---

<Navbar>
  <div class="flex flex-col items-center justify-center">
    <h1 class="text-5xl font-bold text-white text-center mt-10">
      Create a New Deck:
    </h1>
    <div class="flex p-3 m-3 w-2/3 bg-gray-400 rounded-2xl">
      <input
        id="deck-title"
        type="text"
        placeholder="Deck Title"
        class="p-3 h-10 w-full rounded-2xl bg-gray-600 text-white text-3xl"
        required
        maxlength="100"
      />
    </div>

    <div id="card-container" class="flex flex-col w-full h-full items-center">
      <div id="first" class={cardClass} set:html={cardHTML(1)} />
    </div>
    <div class="mb-10">
      <button
        id="new-card"
        type="submit"
        class="bg-white text-black p-3 rounded hover:bg-blue-600 cursor-pointer"
        >New Card
      </button>
      <button
        id="create-deck"
        type="submit"
        class="bg-blue-500 text-white p-3 rounded hover:bg-blue-600 cursor-pointer"
      >
        Create Deck
      </button>
    </div>
  </div>
</Navbar>

<script>
  import { actions } from "astro:actions";
  import { cardClass, cardHTML } from "../assets/createcard";
  import { createNotification } from "../assets/createNotification";

  let cardCount = 1;

  const newCardButton = document.getElementById("new-card");
  const cardContainer = document.getElementById("card-container");

  const textareas = document
    .getElementById("first")!
    .querySelectorAll("textarea");
  textareas.forEach((textarea) => {
    textarea.addEventListener("input", () => autoResize(textarea));
  });

  newCardButton?.addEventListener("click", () => {
    cardCount++;
    createCard(cardCount);
  });

  function createCard(num: number) {
    const newCard = document.createElement("div");
    newCard.className = cardClass;
    newCard.innerHTML = cardHTML(num);

    const textareas = newCard.querySelectorAll("textarea");
    textareas.forEach((textarea) => {
      textarea.addEventListener("input", () => autoResize(textarea));
    });

    cardContainer?.appendChild(newCard);
  }

  function autoResize(textarea: HTMLTextAreaElement) {
    textarea.style.height = "auto";
    textarea.style.height = textarea.scrollHeight + "px";
  }

  document
    .getElementById("create-deck")
    ?.addEventListener("click", async () => {
      const cards = document.querySelectorAll(".card");
      const deck = Array.from(cards).map((card) => {
        const textareas = card.querySelectorAll("textarea");
        return {
          side1: (textareas[0] as HTMLTextAreaElement).value,
          side2: (textareas[1] as HTMLTextAreaElement).value,
        };
      });
      const deckTitle = (
        document.getElementById("deck-title") as HTMLInputElement
      )?.value;
      const response = await actions.createDeck({
        title: deckTitle,
        deck: deck,
      });
      if (response.data?.status === "success") {
        window.location.href = "/";
      } else {
        createNotification(
          "Error creating deck: " + response.data?.message || "Unknown error",
          3000
        );
      }
    });
</script>
